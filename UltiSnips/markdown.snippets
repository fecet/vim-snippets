global !p
import re
def first_p1_not_p2(line, p1, p2):
    p1s = re.search(p1, line)
    p2s = re.search(p2, line)
    if p1s and not p2s:
        return 1
    if p2s and not p1s:
        return -1
    if not p1s and not p2s:
        return 0
    if [x for x in re.finditer(p1, line)][0].span()[0] < [x for x in re.finditer(p2, line)][0].span()[0]:
        return 1
    else:
        return -1

def last_p1_not_p2(line, p1, p2):
    p1s = re.search(p1, line)
    p2s = re.search(p2, line)
    if p1s and not p2s:
        return 1
    if p2s and not p1s:
        return -1
    if not p1s and not p2s:
        return 0
    if [x for x in re.finditer(p1, line)][-1].span()[0] > [x for x in re.finditer(p2, line)][-1].span()[0]:
        return 1
    else:
        return -1
def math():
	if vim_left_last_p1_not_p2(r"https://www.zhihu.com/equation\?tex=\" alt=\"", r"eeimg=\"") and vim_right_first_p1_not_p2(r"eeimg=\"", r"https://www.zhihu.com/equation\?tex=\" alt=\""):
		return True
	lp = vim_left_paragraph()
	rp = vim_right_paragraph()
	lp = " ".join(lp)
	rp = " ".join(rp)
	lp = re.sub(r"(?<!\\)(\\\\)*\\$", "", lp)
	rp = re.sub(r"(?<!\\)(\\\\)*\\$", "", rp)
	tlp = re.sub(r"(?<!\\)(\\\\)*$$", "", lp)
	trp = re.sub(r"(?<!\\)(\\\\)*$$", "", rp)
	if tlp.count("$") % 2 == 1 and "$" in trp:
		return True
	if last_p1_not_p2(lp, "$$", "$") and first_p1_not_p2(rp, "$$", "$") and tlp.count("$$") % 2 == 1:
		return True
	return False
def vim_left_paragraph():
	currentlinenumber = int(vim.eval("line('.')"))
	left = vim.eval("getline('.')[0:col('.')-2]")
	lp = [left]
	for index in range(currentlinenumber-1, -1, -1):
		tline = vim.eval("getline(%d)" % index)
		if not tline.strip():
			return lp
		lp = [tline] + lp
	return lp
def vim_left_all(max_line = 100, offset = 0):
	left = vim.eval("getline('.')[:col('.')-2+(%d)]" % offset)
	content = [left]
	currentlinenumber = int(vim.eval("line('.')"))
	for index in range(currentlinenumber-1, max(0, currentlinenumber - max_line) if max_line > 0 else -1, -1):
		content.append(vim.eval('getline(%d)' % index))
	return content
def vim_right_paragraph():
	currentlinenumber = int(vim.eval("line('.')"))
	right = vim.eval("getline('.')[col('.')-1:]")
	rp = [right]
	for index in range(currentlinenumber+1, int(vim.eval("line('$')")) + 1):
		tline = vim.eval("getline(%d)" % index)
		if not tline.strip():
			return rp
		rp.append(tline)
	return rp
def vim_left_have(pattern):
	currentlinenumber = int(vim.eval("line('.')"))
	currentline = vim.eval("getline('.')")
	currentcol = int(vim.eval("col('.')"))
	left = currentline[0:currentcol-1]
	if re.fullmatch(pattern, left):
		return True
	for index in range(currentlinenumber-1, -1, -1):
		tline = vim.eval("getline(%d)" % index)
		if not tline.strip():
			return False
		if re.fullmatch(pattern, tline):
			return True
def vim_right_have(pattern):
	currentlinenumber = int(vim.eval("line('.')"))
	currentline = vim.eval("getline('.')")
	currentcol = int(vim.eval("col('.')"))
	right = currentline[currentcol-1:]
	if re.fullmatch(pattern, right):
		return True
	for index in range(currentlinenumber+1, int(vim.eval("line('$')")) + 1):
		tline = vim.eval("getline(%d)" % index)
		if not tline.strip():
			return False
		if re.fullmatch(pattern, tline):
			return True
def vim_left_last_p1_not_p2(p1, p2):
	currentlinenumber = int(vim.eval("line('.')"))
	# currentline = vim.eval("getline('.')")
	# currentcol = int(vim.eval("col('.')"))
	left = vim.eval("getline('.')[:col('.')-2]")
	p1s = re.search(p1, left)
	p2s = re.search(p2, left)
	# print(p1, left, p1s)
	# print(p2, left, p2s)
	# print("left: $%s$" % left)
	if p1s and not p2s:
		return True
	if p2s and not p1s:
		return False
	if p1s and p2s:
		return last_p1_not_p2(left, p1, p2) == 1
	else:
		for index in range(int(vim.eval("line('$')")) - 1, 0, -1):
			tline = vim.eval("getline(%d)" % index)
			if not tline.strip():
				return False
			p1s = re.search(p1, tline)
			p2s = re.search(p2, tline)
			if p1s and not p2s:
				return True
			if p2s and not p1s:
				return False
			if p1s and p2s:
				return last_p1_not_p2(tline, p1, p2) == 1
	return False
def vim_right_first_p1_not_p2(p1, p2):
	currentlinenumber = int(vim.eval("line('.')"))
	# currentline = vim.eval("getline('.')")
	# currentcol = int(vim.eval("col('.')"))
	# right = currentline[currentcol-1:]
	right = vim.eval("getline('.')[col('.')-1:]")
	p1s = re.search(p1, right)
	p2s = re.search(p2, right)
	# print(p1, right, p1s)
	# print(p2, right, p2s)
	# print("right: $%s$" % right)
	if p1s and not p2s:
		return True
	if p2s and not p1s:
		return False
	if p1s and p2s:
		return first_p1_not_p2(right, p1, p2) == 1
	else:
		for index in range(currentlinenumber+1, int(vim.eval("line('$')")) + 1):
			tline = vim.eval("getline(%d)" % index)
			if not tline.strip():
				return False
			p1s = re.search(p1, tline)
			p2s = re.search(p2, tline)
			if p1s and not p2s:
				return True
			if p2s and not p1s:
				return False
			if p1s and p2s:
				return first_p1_not_p2(tline, p1, p2) == 1
	return False

endglobal

snippet help "help of sup" b
The options currently supported are: >
   b   Beginning of line - A snippet with this option is expanded only if the
       tab trigger is the first word on the line. In other words, if only
       whitespace precedes the tab trigger, expand. The default is to expand
       snippets at any position regardless of the preceding non-whitespace
       characters.

   i   In-word expansion - By default a snippet is expanded only if the tab
       trigger is the first word on the line or is preceded by one or more
       whitespace characters. A snippet with this option is expanded
       regardless of the preceding character. In other words, the snippet can
       be triggered in the middle of a word.

   w   Word boundary - With this option, the snippet is expanded if
       the tab trigger start matches a word boundary and the tab trigger end
       matches a word boundary. In other words the tab trigger must be
       preceded and followed by non-word characters. Word characters are
       defined by the 'iskeyword' setting. Use this option, for example, to
       permit expansion where the tab trigger follows punctuation without
       expanding suffixes of larger words.

   r   Regular expression - With this option, the tab trigger is expected to
       be a python regular expression. The snippet is expanded if the recently
       typed characters match the regular expression. Note: The regular
       expression MUST be quoted (or surrounded with another character) like a
       multi-word tab trigger (see above) whether it has spaces or not. A
       resulting match is passed to any python code blocks in the snippet
       definition as the local variable "match".

   t   Do not expand tabs - If a snippet definition includes leading tab
       characters, by default UltiSnips expands the tab characters honoring
       the Vim 'shiftwidth', 'softtabstop', 'expandtab' and 'tabstop'
       indentation settings. (For example, if 'expandtab' is set, the tab is
       replaced with spaces.) If this option is set, UltiSnips will ignore the
       Vim settings and insert the tab characters as is. This option is useful
       for snippets involved with tab delimited formats.

   s   Remove whitespace immediately before the cursor at the end of a line
       before jumping to the next tabstop.  This is useful if there is a
       tabstop with optional text at the end of a line.

   m   Trim all whitespaces from right side of snippet lines. Useful when
       snippet contains empty lines which should remain empty after expanding.
       Without this option empty lines in snippets definition will have
       indentation too.

   e   Custom context snippet - With this option expansion of snippet can be
       controlled not only by previous characters in line, but by any given
       python expression. This option can be specified along with other
       options, like 'b'. See |UltiSnips-custom-context-snippets| for more info.

   A   Snippet will be triggered automatically, when condition matches.
       See |UltiSnips-autotrigger| for more info.
endsnippet

snippet beamertemp "Beamer template" bA
---
title: "${1:Factors selection}"
author: Xie Zejian
institute: SUSTech
date: "${2:Dec 13,2020}"
output: 
  beamer_presentation:
    theme: "AnnArbor"
    colortheme: "dolphin"
    fonttheme: "structurebold"
    toc: true
    includes:
      in_header: "preamble.tex"
---
endsnippet

snippet essaytemp "Essay template" bA
---
title: $1
author:
  - Xie zejian
bibliography: references.bib
output:
  bookdown::pdf_document2:
    includes:
      in_header: preamble.tex
---
endsnippet

snippet cjktemp "CJK essay" bA
title: $1
author:
  - 谢泽健
documentclass: ctexart
output:
  rticles::ctex:
    fig_caption: yes
    number_sections: yes
    toc: yes
endsnippet

snippet rsetup "r chunks setup" bA
\`\`\`{r, setup, include=FALSE}
knitr::opts_chunk$set(warning=FALSE,
					  message=FALSE,
					  echo=FALSE, 
					  fig.width=8)
## collapse = TRUE
# dec = 'jpeg'
# eval = FALSE
# https://yihui.org/knitr/options/#chunk-options
library(tidyverse)
library(latex2exp)
\`\`\`
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	${2:${VISUAL}}
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\dots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet



snippet desc "Description" b
\begin{description}
	\item[$1]$0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

context "math()"
snippet => "implies" Ai
\xRightarrow{}
endsnippet

context "math()"
snippet <= "implied by" Ai
\xLeftarrow{}
endsnippet

context "math()"
snippet iff "iff" Ai
\xLeftrightarrow{}
endsnippet

context "math()"
snippet embed "embedding" Ai
\hookrightarrow
endsnippet

context "math()"
snippet sucs "embedding" Ai
\succsim 
endsnippet

context "math()"
snippet suc "embedding" Ai
\succ 
endsnippet

snippet kk "Math" iAs
 $$1$
endsnippet


snippet mk "Math" wA
$${1:${VISUAL}}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

context "math()"
snippet ali "Align" iA
\begin{aligned}
	${1:${VISUAL}}
\end{aligned}
endsnippet

context "math()"
snippet qt "Quotient" iA
/
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet


context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet



context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet mm "mathematicablock" wsA

$$ 
$1
$$$0

endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

context "math()"
snippet == "equals" iA

\\\\ &= $1
endsnippet

context "math()"
snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil$0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix}$0
endsnippet

context "math()"
snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix}$0
endsnippet

snippet ( "()" iA
($1)
endsnippet

snippet { "()" iwA
{$1}
endsnippet


snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right)$0
endsnippet


snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right)$0
endsnippet



snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right)$0
endsnippet


snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right|$0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right]$0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet sum "sum" wA
\sum_{${1:i \in I}}^{} 
endsnippet

context "math()"
snippet taylor "taylor" wA
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1$0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet limsup "limsup" wA
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet prod "product" wA
\prod_{${1:n=1}} ${4:${VISUAL}}$0
endsnippet

context "math()"
snippet coprod "product" wA
\coprod_{${1:n=1}} ${4:${VISUAL}}$0
endsnippet


context "math()"
snippet part "d/dx" wA
\frac{\partial ${1:V}}{\partial ${2:x}}$0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet le "leq" iA
\le 
endsnippet

context "math()"
snippet ge "geq" iA
\ge 
endsnippet

context "math()"
snippet lt "leq" iA
<
endsnippet

context "math()"
snippet gt "geq" iA
>
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet



snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
context "math()"
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

context "math()"
snippet abs "abs value" iA
|$1|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|epsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilog|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Pi|Sigma|Upsilon|Phi|Psi|Omega|ell)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}}$0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet to "to" iA
\to 
endsnippet

priority 1000
context "math()"
snippet xto "to" iA
\xrightarrow{}
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet




context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet sim "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\}$0
endsnippet

context "math()"
snippet || "mid" iA
 \mid 
endsnippet


context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

context "math()"
snippet pc "subset" Ai
\supset 
endsnippet

context "math()"
snippet nin "not in " iA
\notin 
endsnippet

context "math()"
snippet not "not in " iA
\not 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

context "math()"
snippet NN "n" iA
\mathbb{N}
endsnippet

context "math()"
snippet cap "cap" iA
\cap 
endsnippet

context "math()"
snippet cup "cup" iA
\cup 
endsnippet


context "math()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}}$0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}}$0
endsnippet


context "math()"
snippet OO "emptyset" iA
\emptyset
endsnippet

context "math()"
snippet RR "real" iA
\mathbb{R}
endsnippet

context "math()"
snippet QQ "Q" iA
\mathbb{Q}
endsnippet

context "math()"
snippet ZZ "Z" iA
\mathbb{Z}
endsnippet

context "math()"
snippet <! "normal" iA
\triangleleft 
endsnippet

context "math()"
snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1}$0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet


snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) =$0
.\end{align*}
endsnippet

snippet nvec "column vector" iA
\begin{bmatrix} $1 \end{bmatrix}
endsnippet

snippet cvec "column vector" iA
\begin{bmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{bmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z]|\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varphi|\\varepsilon|\\epsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega)bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "([\\|a-z|A-Z|0-9|'|_|^]*)hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`$1}
endsnippet


snippet let "let" b
Let $$1$ be a $2
endsnippet

snippet letx "let omega" bA
Let $X$ be a space
endsnippet

snippet lettau "Description" bA
Let $(X,\tau)$ be a topological space
endsnippet

snippet letdp "Description" bA
Let $(X,\succsim)$ be a decision problem
endsnippet

snippet letcdp "Description" bA
Let $(X,\succsim)$ be a convex decision problem
endsnippet

priority 100
context "math()"
snippet "\b([a-zA-Z])ii" "?i" riA
`!p snip.rv=match.group(1)`_i
endsnippet

priority 101
context "math()"
snippet "([a-zA-Z]|\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varphi|\\varepsilon|\\epsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega)ii" "?i" riA
`!p snip.rv=match.group(1)`_i
endsnippet


priority 100
context "math()"
snippet "([a-zA-Z]|\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varphi|\\varepsilon|\\epsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega)jj" "?j" riA
`!p snip.rv=match.group(1)`_j
endsnippet

snippet dfun "Definition of function" iA
$1\colon ${2:\mathbb{R}} \to ${3:\mathbb{R}}, ${4:x} \mapsto$0
endsnippet

# mathop 

context "math()"
snippet mean "Expectation" iA
\mathop{\text{E}}\left[ $1 \right]
endsnippet

context "math()"
snippet var "variance" iA
\mathop{\text{Var}}\left[ $1 \right]
endsnippet



context "math()"
snippet cov "covariance" iA
\mathop{\text{Cov}}\left[ $1,$2 \right]
endsnippet

context "math()"
snippet eig "eigenvalues" iA
\mathop{\text{eig}}\left($1\right)
endsnippet

context "math()"
snippet rank "rank" iA
\mathop{\text{rank}}\left( $1 \right)
endsnippet

context "math()"
snippet tr "trace" iA
\mathop{\text{tr}}\left( $1 \right)
endsnippet


context "math()"
snippet Gr "Graph" iA
\mathop{\text{Gr}}
endsnippet

context "math()"
snippet Adh "Adherence" iA
\mathop{\text{Adh}}
endsnippet

context "math()"
snippet Int "Interior" iA
\mathop{\text{Int}}
endsnippet

context "math()"
snippet circ "Interior" iA
\circ
endsnippet

context "math()"
snippet vph "var phi" iA
\varphi
endsnippet

priority 100
context "math()"
snippet "([\\|a-z|A-Z|0-9|'|_|^]*)bf" "mathbf" riA
\bm{\mathbf{`!p snip.rv=match.group(1)`$1}}
endsnippet

snippet tex "latex code" b

::: {.latex}
$1
:::

endsnippet

snippet lem "lemma" b

::: {.lemma ${1:#label} name="${2}"}

${3:${VISUAL}}

:::

endsnippet


snippet thm "theorem" b

::: {.theorem ${1:#label} name="${2}"}

${3:${VISUAL}}

:::

endsnippet

snippet def "definition" b

::: {.definition ${1:#label} name="${2}"}

${3:${VISUAL}}

:::

endsnippet


snippet cor "corollary" b

::: {.corollary ${1:#label} name="${2}"}

${3:${VISUAL}}

:::

endsnippet

snippet exm "example" b

::: {.example ${1:#label} name="${2}"}

${3:${VISUAL}}

:::

endsnippet

snippet exr "example" b

::: {.exercise ${1:#label} name="${2}"}

${3:${VISUAL}}

:::

snippet cnj "example" b

::: {.conjecture ${1:#label} name="${2}"}

${3:${VISUAL}}

:::

endsnippet

snippet prp "example" b

::: {.proposition ${1:#label} name="${2}"}

${3:${VISUAL}}

:::

endsnippet


snippet prof "proof" b

::: {.proof}

${1:${VISUAL}}

:::

endsnippet

snippet rmar "proof" b

::: {.remark}

${1:${VISUAL}}

:::

endsnippet

snippet rcod "r-code" bA
\`\`\`{r}
$1
\`\`\`
endsnippet


snippet cref "cross reference" wA
\@ref($1:$2)
endsnippet

# 上一个单词转换成小写
snippet "([^\s]\w+)\.lower" "Lowercase(postfix)" rA
`!p snip.rv = match.group(1).lower()`$0
endsnippet

snippet "([^\s]\w+)\.capze" "capitalize(postfix)" rA
`!p snip.rv = match.group(1).capitalize()`$0
endsnippet


context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet cpl "complement" iA
^c
endsnippet


context "math()"
snippet 11 "indicator" iA
\bm{\mathbf{1}}
endsnippet

context "math()"
snippet eces "complement" iA
^e
endsnippet

snippet bigopt "Optimization problem" iA
\begin{aligned}
	\min &\quad ${1:f(x)}\\\\
	\text{s.t.} &\quad ${2:g(x)} \leq 0\\\\
				&\quad ${3:h(x)} = 0\\\\
\end{align*}
endsnippet

snippet bigmax "Optimization problem" iA
\begin{aligned}
	\max &\quad ${1:f(x)}
	\\\\s.t. &\quad ${2:g(x)} = 0
\end{aligned}
endsnippet

snippet st "such that" i
s.t.
endsnippet

snippet ie "i.e." i
i.e.
endsnippet

snippet wrt "with respect to" i
w.r.t.
endsnippet

context "math()"
snippet % "percent" iA
\%
endsnippet


context "math()"
snippet and "and" iA
\text{ and }
endsnippet

context "math()"
snippet or "and" iA
\text{ or }
endsnippet

context "math()"
snippet over "and" iA
\overset{$1}{$2}
endsnippet



# Markdown syntax

snippet chp "section #" b
# 
endsnippet

snippet sc "section ##" bA
## 
endsnippet

snippet ssc "section ###" bA
### 
endsnippet

snippet sssc "section ####" bA
#### 
endsnippet

snippet enum "Enumerate" b
1. ${1:text}
endsnippet

snippet item "Itemize" b
- $1
endsnippet

snippet emph "Emph" iA
**$1**
endsnippet

snippet newl "new line" b
<br>
endsnippet

snippet slink "url" i
[$1]($2)
endsnippet
